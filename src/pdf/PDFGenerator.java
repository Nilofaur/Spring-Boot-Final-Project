package pdf;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import SQL.SQL;

//https://www.tutorialspoint.com/jfreechart/jfreechart_bar_chart.htm
//https://www.tutorialspoint.com/itext/itext_adding_image_to_pdf.htm
//https://www.concretepage.com/itext/add-image-in-pdf-using-itext-in-java
//https://www.viralpatel.net/generate-pie-chart-bar-graph-in-pdf-using-itext-jfreechart/

public class PDFGenerator {
	
	public static String name;

	public static String pdf_name(String name) {

		PDFGenerator.name = name;

		return name;

	}

	// TODO: Change Variable Names and Styling of report private static String
	private static String FILE = "";
	private static Font catFont = new Font(Font.FontFamily.COURIER, 20, Font.BOLD);
	private static Font subFont = new Font(Font.FontFamily.COURIER, 16, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.COURIER, 12, Font.BOLD);

	private static java.util.List<ManualUpdate> privateTableData = new ArrayList<>();

	public static PdfWriter writer;

	public static void test() {
		System.out.println("calling test ");

	}
	

	
	  public static void generateReport(java.util.List<ManualUpdate> tableData) {
	  try {
		  FILE="C:/Users/nilof/Desktop/UNI/FINAL YEAR PROJECT/learnWorkspace/"+ "Lifestyle/WebContent/img/"+PDFGenerator.name+".pdf";
		  
		  System.out.println("FILE"+FILE);
      System.out.println("pdf generator class name: "+name);
	  Document document = new Document();
	  
	  for (ManualUpdate element : tableData) { privateTableData.add(element); }
	  
	  writer = PdfWriter.getInstance(document, new FileOutputStream(FILE));
	  document.open(); addCoverPage(document); addReportContent(document);
	  document.close();
	  System.out.println("pdf generateddddd ");

	  } catch (Exception e) { e.printStackTrace(); } }
	 

    private static void addCoverPage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        insertEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Calorie Tracking Report", catFont));

        insertEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph("Report generated on: " + new Date() + " For user: " + privateTableData.get(0).getUserid(), smallBold));
        insertEmptyLine(preface, 2);
        preface.add(new Paragraph(
                "This reports breaks down the calorie intake and expenditure for today. The report gives " +
                        "you an overview of all the current recordings of your progress since the start of your plan. ",
                smallBold));

        document.add(preface);

    }

	private static void addReportContent(Document document) throws DocumentException, IOException {

		Anchor anchor = new Anchor("Calorie Record", catFont);
		anchor.setName("Calorie Record");

		// Second parameter is the number of the chapter
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);

		// Section 1
		Paragraph subPara = new Paragraph("Current User Calorie Data", subFont);
		Section subCatPart = catPart.addSection(subPara);

		// Section 2
		/**
		 * TODO: Add in current readings for the day
		 */
		Paragraph subPara2 = new Paragraph("Current User Calorie Records", subFont);
		subCatPart = catPart.addSection(subPara2);

		Paragraph tableExplanation = new Paragraph(
				"The table below shows the reminder calories that you will have to burn to"
						+ " achieve your plan goal.");
		insertEmptyLine(tableExplanation, 2);

		subCatPart.add(tableExplanation);

		// Adds table from List
		createDynamicTable(subCatPart);

		// Generate Graph from List
		generateGraph(subCatPart);

		// now add all this to the document
		document.add(catPart);

	}

	/**
	 * Creates a table from the Manual Update List
	 *
	 * @param subCatPart
	 * @throws BadElementException
	 */

	private static void createDynamicTable(Section subCatPart) throws BadElementException {

		PdfPTable table = new PdfPTable(privateTableData.size());
		table.setSpacingAfter(40);
		PdfPCell c1;

		for (ManualUpdate element : privateTableData) {
			c1 = new PdfPCell(new Phrase(element.getTod()));
			c1.setHorizontalAlignment(Element.ALIGN_CENTER);
			table.addCell(c1);
		}
		for (ManualUpdate element : privateTableData) {
			table.addCell(Integer.toString(element.getBalance_cal()));
		}

		subCatPart.add(table);
	}

	/**
	 * A graph to generate a graph using JFreeChart
	 *
	 * @param subCatPart
	 * @throws DocumentException
	 * @throws IOException
	 */

	private static void generateGraph(Section subCatPart) throws DocumentException, IOException {

		// Creates a buffer image based on generated chart and sets height and weight
		BufferedImage bufferedImage = Graph.generateGraph(privateTableData).createBufferedImage(550, 500);
		Image image = Image.getInstance(writer, bufferedImage, 1.0f);
		image.setAlignment(Element.ALIGN_CENTER);
		subCatPart.add(image);

	}

	/**
	 * @param paragraph
	 * @param number
	 */
	private static void insertEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

}
